<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple_textured_unlit_stereoImage.frag
//  fragment shader
//
//  Created by Sam Gateau on 12/26/2018.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Color.slh@>
<@include DeferredBufferWrite.slh@>


<@include render-utils/ShaderConstants.h@>

// the albedo texture
LAYOUT(binding=0) uniform sampler2D originalTexture;

// the interpolated normal
layout(location=RENDER_UTILS_ATTR_NORMAL_WS) in vec3 _normalWS;
layout(location=RENDER_UTILS_ATTR_COLOR) in vec4 _color;
layout(location=RENDER_UTILS_ATTR_TEXCOORD01) in vec4 _texCoord01;
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw

#ifdef GPU_TRANSFORM_STEREO_CAMERA
layout(location=8) flat in int _stereoSide;
#endif

void main(void) {
    vec2 uvStereo = _texCoord0;  
#ifdef GPU_TRANSFORM_STEREO_CAMERA
    uvStereo.x = (_texCoord0.x * 0.5) + (_stereoSide == 0 ? 0.0 : 0.5); 
#endif

    vec4 texel = texture(originalTexture, uvStereo);
    texel = mix(texel, color_sRGBAToLinear(texel), float(_color.a <= 0.0));
    texel.rgb *= _color.rgb;
    texel.a *= abs(_color.a);

    const float ALPHA_THRESHOLD = 0.999;
    if (texel.a < ALPHA_THRESHOLD) {
       packDeferredFragmentTranslucent(
            normalize(_normalWS),
            texel.a,
            texel.rgb,
            DEFAULT_ROUGHNESS);
    } else {
        packDeferredFragmentUnlit(
            normalize(_normalWS),
            1.0,
            texel.rgb);
    }
}