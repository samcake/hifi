<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//  model.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 10/14/13.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include LightingModel.slh@>

<@include DeferredBufferWrite.slh@>

<@include model/Material.slh@>

<@include gpu/Paint.slh@>

<@include MaterialTextures.slh@>
<$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, _SCRIBE_NULL, EMISSIVE, OCCLUSION)$>

in vec4 _position;
in vec3 _normal;
in vec3 _color;
in vec2 _texCoord0;
in vec2 _texCoord1;


void main(void) {
    Material mat = getMaterial();
    int matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedoTex, roughnessTex, _SCRIBE_NULL, _SCRIBE_NULL, emissiveTex)$>
    <$fetchMaterialTexturesCoord1(matKey, _texCoord1, occlusionTex)$>

    float opacity = 1.0;
    <$evalMaterialOpacity(albedoTex.a, opacity, matKey, opacity)$>;
    <$discardTransparent(opacity)$>;

    vec3 albedo = getMaterialAlbedo(mat);
    <$evalMaterialAlbedo(albedoTex, albedo, matKey, albedo)$>;
    albedo *= _color;

    float roughness = getMaterialRoughness(mat);
    <$evalMaterialRoughness(roughnessTex, roughness, matKey, roughness)$>;

    vec3 emissive = getMaterialEmissive(mat);
    <$evalMaterialEmissive(emissiveTex, emissive, matKey, emissive)$>;

    if (bool(isShowTexcoord())) {
        float gridA = paintGrid( _texCoord0, vec2( -0.00125, -0.00125 ), textureMajorGrid() * vec2( 0.25, 0.25 ), vec2( 0.01, 0.01 ) );
  //      float gridB = paintGrid( _texCoord0, vec2( -0.0003125, -0.0003125 ), vec2( 0.0625, 0.0625 ), vec2( 0.01, 0.01 ) );
  //      float gridC = paintGrid( _texCoord0, vec2( -0.0000781, -0.0000781 ), vec2( 0.015625, 0.015625 ), vec2( 0.01, 0.01 ) );

    //    albedo = gridC * vec3(0.353, 0.431, 0.475) + (1 - gridC)* albedo;
   //     albedo = gridB * vec3(0.710, 0.424, 0.388) + (1 - gridB)* albedo;
        albedo = gridA * vec3(0.812, 0.820, 0.776) + (1 - gridA)* albedo;
    }

    float scattering = getMaterialScattering(mat);

    packDeferredFragment(
        normalize(_normal.xyz), 
        opacity,
        albedo,
        roughness,
        getMaterialMetallic(mat),
        emissive,
        occlusionTex,
        scattering);
}
