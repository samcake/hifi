<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//  model.frag
//  fragment shader
//
//  Created by Andrzej Kapolka on 10/14/13.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include LightingModel.slh@>

<@include DeferredBufferWrite.slh@>

<@include model/Material.slh@>

<@include gpu/Paint.slh@>
<@include gpu/Color.slh@>
<$declareColorWheel()$>

<@include MaterialTextures.slh@>
<$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, _SCRIBE_NULL, EMISSIVE, OCCLUSION)$>

in vec4 _position;
in vec3 _normal;
in vec3 _color;
in vec2 _texCoord0;
in vec2 _texCoord1;


void main(void) {
    Material mat = getMaterial();
    int matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedoTex, roughnessTex, _SCRIBE_NULL, _SCRIBE_NULL, emissiveTex)$>
    <$fetchMaterialTexturesCoord1(matKey, _texCoord1, occlusionTex)$>

    float opacity = 1.0;
    <$evalMaterialOpacity(albedoTex.a, opacity, matKey, opacity)$>;
    <$discardTransparent(opacity)$>;

    vec3 albedo = getMaterialAlbedo(mat);
    <$evalMaterialAlbedo(albedoTex, albedo, matKey, albedo)$>;
    albedo *= _color;

    float roughness = getMaterialRoughness(mat);
    <$evalMaterialRoughness(roughnessTex, roughness, matKey, roughness)$>;

    vec3 emissive = getMaterialEmissive(mat);
    <$evalMaterialEmissive(emissiveTex, emissive, matKey, emissive)$>;

    if (bool(isShowTexcoord())) {
        const vec2 MAJOR_OFFSET = vec2( -0.00125 );
        const vec2 MAJOR_SCALE = vec2( 0.25 );
        const vec2 MAJOR_EDGE = vec2( 0.01 );

        vec2 majorScale = textureMajorGrid() * MAJOR_SCALE;
        vec2 major = vec2( paintStripe(_texCoord0.x, MAJOR_OFFSET.x, majorScale.x, MAJOR_EDGE.x), paintStripe(_texCoord0.y, MAJOR_OFFSET.y, majorScale.y, MAJOR_EDGE.y));
        float gridA = max(major.x, major.y);

        vec3 majorColor = vec3(0.812, 0.820, 0.776);
        if (major.y >= major.x) {
            majorColor = vec3(_texCoord0, 0.0);
        }
        albedo = gridA * majorColor + (1 - gridA)* albedo;
        emissive = gridA * majorColor + (1 - gridA)* emissive;
    }

    float scattering = getMaterialScattering(mat);

    packDeferredFragment(
        normalize(_normal.xyz), 
        opacity,
        albedo,
        roughness,
        getMaterialMetallic(mat),
        emissive,
        occlusionTex,
        scattering);
}
