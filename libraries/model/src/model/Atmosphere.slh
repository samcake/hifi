<!
//  Atmospheric.slh
//
//  Created by Sam Gateau on 3/9/15.
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not MODEL_ATMOSPHERE_SLH@>
<@def MODEL_ATMOSPHERE_SLH@>

<!
// Code is a modified version of:
// http://http.developer.nvidia.com/GPUGems/gpugems_app01.html
// Atmospheric scattering fragment shader
//
// Author: Sean O'Neil
//
// Copyright (c) 2004 Sean O'Neil

//
// For licensing information, see http://http.developer.nvidia.com/GPUGems/gpugems_app01.html:
//
// NVIDIA Statement on the Software
//
// The source code provided is freely distributable, so long as the NVIDIA header remains unaltered and user modifications are
// detailed.
//
// No Warranty
//
// THE SOFTWARE AND ANY OTHER MATERIALS PROVIDED BY NVIDIA ON THE ENCLOSED CD-ROM ARE PROVIDED "AS IS." NVIDIA DISCLAIMS ALL
// WARRANTIES, EXPRESS, IMPLIED OR STATUTORY, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//
// Limitation of Liability
//
// NVIDIA SHALL NOT BE LIABLE TO ANY USER, DEVELOPER, DEVELOPER'S CUSTOMERS, OR ANY OTHER PERSON OR ENTITY CLAIMING THROUGH OR
// UNDER DEVELOPER FOR ANY LOSS OF PROFITS, INCOME, SAVINGS, OR ANY OTHER CONSEQUENTIAL, INCIDENTAL, SPECIAL, PUNITIVE, DIRECT
// OR INDIRECT DAMAGES (WHETHER IN AN ACTION IN CONTRACT, TORT OR BASED ON A WARRANTY), EVEN IF NVIDIA HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF THE ESSENTIAL PURPOSE OF ANY
// LIMITED REMEDY. IN NO EVENT SHALL NVIDIA'S AGGREGATE LIABILITY TO DEVELOPER OR ANY OTHER PERSON OR ENTITY CLAIMING THROUGH
// OR UNDER DEVELOPER EXCEED THE AMOUNT OF MONEY ACTUALLY PAID BY DEVELOPER TO NVIDIA FOR THE SOFTWARE OR ANY OTHER MATERIALS.
//
!>

struct Atmosphere {
    vec4 _invWaveLength;
    vec4 _radiuses;
    vec4 _scales;
    vec4 _scatterings;
    vec4 _control;
};

const int numSamples = 2; 

vec3 getAtmosphereInvWaveLength(Atmosphere a) { return a._invWaveLength.xyz; } // 1 / pow(wavelength, 4) for the red, green, and blue channels

float getAtmosphereInnerRadius(Atmosphere a) { return a._radiuses.x; } // The inner (planetary) radius
float getAtmosphereOuterRadius(Atmosphere a) { return a._radiuses.y; } // The outer (atmosphere) radius

float getAtmosphereScale(Atmosphere a) { return a._scales.x; } // 1 / (outerRadius - innerRadius)
float getAtmosphereScaleDepth(Atmosphere a) { return a._scales.y; } // The scale depth (i.e. the altitude at which the atmosphere's average density is found)
float getAtmosphereScaleOverScaleDepth(Atmosphere a) { return a._scales.z; } // scale / scaleDepth

vec4 getAtmosphereScattering(Atmosphere a) { return a._scatterings; } // The full Mie and Rayleigh scattering coefficients
float getAtmosphereKrESun(Atmosphere a) { return a._scatterings.x; } // Kr * ESun
float getAtmosphereKmESun(Atmosphere a) { return a._scatterings.y; } // Km * ESun
float getAtmosphereKr4PI(Atmosphere a) { return a._scatterings.z; }  // Kr * 4 * PI
float getAtmosphereKm4PI(Atmosphere a) { return a._scatterings.w; }  // Km * 4 * PI

float getAtmosphereNumSamples(Atmosphere a) { return a._control.x; } // numSamples
vec2 getAtmosphereGAndG2(Atmosphere a) { return a._control.yz; } // g and g2

float atmosphereScale(float scaleDepth, float fCos)
{
    float x = 1.0 - fCos;
    return scaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));
}

vec4 evalAtmosphereContribution(Atmosphere atmospheric, vec3 position, vec3 cameraPos, vec3 lightPos) {
    float fInnerRadius = getAtmosphereInnerRadius(atmospheric);
    float fSamples = getAtmosphereNumSamples(atmospheric);
  
    vec3 v3InvWavelength = getAtmosphereInvWaveLength(atmospheric);
    vec4 scatteringCoefs = getAtmosphereScattering(atmospheric);
    float fKrESun = scatteringCoefs.x;
    float fKmESun = scatteringCoefs.y;
    float fKr4PI = scatteringCoefs.z;
    float fKm4PI = scatteringCoefs.w;

    vec2 gAndg2 = getAtmosphereGAndG2(atmospheric);
    float g = gAndg2.x;
    float g2 = gAndg2.y;

    float fScale = getAtmosphereScale(atmospheric);
    float fScaleDepth = getAtmosphereScaleDepth(atmospheric);
    float fScaleOverScaleDepth = getAtmosphereScaleOverScaleDepth(atmospheric);

    // Get the ray from the camera to the vertex, and its length (which is the far point of the ray passing through the atmosphere)
    vec3 v3Pos = position;
    vec3 v3Ray = v3Pos - cameraPos;
    float fFar = length(v3Ray);
    v3Ray /= fFar;
    
    // Calculate the ray's starting position, then calculate its scattering offset
    vec3 v3Start = cameraPos;
    float fHeight = length(v3Start);
    float fDepthStart = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));
    float fStartAngle = dot(v3Ray, v3Start) / fHeight;
    float fStartOffset = fDepthStart * atmosphereScale(fScaleDepth, fStartAngle);
    
    // Initialize the scattering loop variables
    //gl_FrontColor = vec4(0.0, 0.0, 0.0, 0.0);
    float fSampleLength = fFar / fSamples;
    float fScaledLength = fSampleLength * fScale;

    vec3 v3SampleRay = v3Ray * fSampleLength;
    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;
    
    // Now loop through the sample rays
    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);
   // int nSamples = numSamples;
    int nSamples = int(fSamples);
    for(int i=0; i<nSamples; i++)
    {
        float fHeight = length(v3SamplePoint);
        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));
        float fLightAngle = dot(lightPos, v3SamplePoint) / fHeight;
        float fCameraAngle = dot((v3Ray), v3SamplePoint) / fHeight * 0.99;
        float fScatter = (fStartOffset + fDepth * (atmosphereScale(fScaleDepth, fLightAngle) - atmosphereScale(fScaleDepth, fCameraAngle)));
        vec3 v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));
        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);
        v3SamplePoint += v3SampleRay;
    }
    
    // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader
    vec3 secondaryFrontColor = v3FrontColor * fKmESun;
    vec3 frontColor = v3FrontColor * (v3InvWavelength * fKrESun);
    vec3 v3Direction = cameraPos - v3Pos;
    
    float fCos = dot(lightPos, v3Direction) / length(v3Direction);
    float fMiePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCos*fCos) / pow(1.0 + g2 - 2.0*g*fCos, 1.5);
    vec4 finalColor;

    finalColor.rgb = frontColor.rgb + fMiePhase * secondaryFrontColor.rgb;
    finalColor.a = finalColor.b;
    finalColor.rgb = pow(finalColor.rgb, vec3(1.0/2.2));

    return finalColor;
}


<@if GLPROFILE == PC_GL@>
uniform atmosphereBuffer {
    Atmosphere _atmosphere;
};
Atmosphere getAtmosphere() {
    return _atmosphere;
}
<@else@>
uniform vec4 atmosphereBuffer[9];
Atmosphere getAtmosphere() {
    Atmosphere atmosphere;
    atmosphere._invWaveLength = atmosphereBuffer[0];
    atmosphere._radiuses = atmosphereBuffer[1];
    atmosphere._scales = atmosphereBuffer[2];
    atmosphere._scatterings = atmosphereBuffer[3];
    atmosphere._control = atmosphereBuffer[4];

    return atmosphere;
}
<@endif@>

<!
/*
// uniform vec3 v3CameraPos;        // The camera's current position


const int nSamples = 2;
const float fSamples = 2.0;

uniform vec3 v3LightPos;
uniform float g;
uniform float g2;

varying vec3 position;

float scale(float fCos)
{
    float x = 1.0 - fCos;
    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));
}

void main (void)
{
    // Get the ray from the camera to the vertex, and its length (which is the far point of the ray passing through the atmosphere)
    vec3 v3Pos = position;
    vec3 v3Ray = v3Pos - v3CameraPos;
    float fFar = length(v3Ray);
    v3Ray /= fFar;
    
    // Calculate the ray's starting position, then calculate its scattering offset
    vec3 v3Start = v3CameraPos;
    float fHeight = length(v3Start);
    float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));
    float fStartAngle = dot(v3Ray, v3Start) / fHeight;
    float fStartOffset = fDepth * scale(fStartAngle);
    
    // Initialize the scattering loop variables
    //gl_FrontColor = vec4(0.0, 0.0, 0.0, 0.0);
    float fSampleLength = fFar / fSamples;
    float fScaledLength = fSampleLength * fScale;
    vec3 v3SampleRay = v3Ray * fSampleLength;
    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;
    
    // Now loop through the sample rays
    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);
    for(int i=0; i<nSamples; i++)
    {
        float fHeight = length(v3SamplePoint);
        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));
        float fLightAngle = dot(v3LightPos, v3SamplePoint) / fHeight;
        float fCameraAngle = dot((v3Ray), v3SamplePoint) / fHeight * 0.99;
        float fScatter = (fStartOffset + fDepth * (scale(fLightAngle) - scale(fCameraAngle)));
        vec3 v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));
        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);
        v3SamplePoint += v3SampleRay;
    }
    
    // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader
    vec3 secondaryFrontColor = v3FrontColor * fKmESun;
    vec3 frontColor = v3FrontColor * (v3InvWavelength * fKrESun);
    vec3 v3Direction = v3CameraPos - v3Pos;
    
    float fCos = dot(v3LightPos, v3Direction) / length(v3Direction);
    float fMiePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCos*fCos) / pow(1.0 + g2 - 2.0*g*fCos, 1.5);
    outFragColor.rgb = frontColor.rgb + fMiePhase * secondaryFrontColor.rgb;
    outFragColor.a = outFragColor.b;
    outFragColor.rgb = pow(outFragColor.rgb, vec3(1.0/2.2));
}
*/
!>

<@endif@>
