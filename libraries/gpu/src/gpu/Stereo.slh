<!
//  gpu/Stereo.slh
//
//  Created by Sam Gateau on 4/4/19.
//  Copyright 2019 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not GPU_STEREO_SLH@>
<@def GPU_STEREO_SLH@>

<@include gpu/ShaderConstants.h@>

// gpu shader api for Stereo stage
// Stereo technique derives from the shader variant, the shader domain, and the platform

// Vertex Shader
#ifdef GPU_VERTEX_SHADER
// Stereo variant
#ifdef GPU_TRANSFORM_IS_STEREO
// With stereo camera provided
#ifdef GPU_TRANSFORM_STEREO_CAMERA

// If Stereo side is provided from drawcall input attribute
#ifdef GPU_TRANSFORM_STEREO_CAMERA_ATTRIBUTED
layout(location=GPU_ATTR_STEREO_SIDE) in int _inStereoSide;
#endif
// the alternative is that it is deduced from the instanceID %2 see below

// gpu_InstanceID()
// In stereo drawcall mode Instances are drawn twice (left then right) hence the true InstanceID is the gl_InstanceID / 2
int gpu_InstanceID() {
#ifdef GPU_TRANSFORM_STEREO_CAMERA_ATTRIBUTED
    return gl_InstanceID;
#elif defined(GPU_TRANSFORM_STEREO_CAMERA_INSTANCED)
    return gl_InstanceID >> 1;
#else
    return gl_InstanceID;
#endif
}

// gpu_StereoSide()
// THe side of stereo is 0 for left, 1 for right
int gpu_StereoSide() {
#ifdef GPU_TRANSFORM_STEREO_CAMERA_ATTRIBUTED
    return _inStereoSide;
#elif defined(GPU_TRANSFORM_STEREO_CAMERA_INSTANCED)
    return gl_InstanceID % 2;
#else 
    return 0;
#endif
}

// Stereo is output and passed to next shader domain with this varying
layout(location = GPU_ATTR_V2F_STEREO_SIDE) flat out int _stereoSide;

// THis api call gpu_outputStereoSIde() must be called explicitely.
// THis is done in automatically calling transformStereoClipsSpace()
void gpu_outputStereoSide() {
    _stereoSide = gpu_StereoSide();
}

#else  // Non GPU_TRANSFORM_STEREO_CAMERA

int gpu_InstanceID() { return gl_InstanceID; }
// no gpu_StereoSide () call since that info is not specific to the vertex shader invocation in this case

#endif 
#else // Non stereo variant GPU_TRANSFORM_IS_STEREO
// gpu_InstanceID() in non stereo variant
int gpu_InstanceID() { return gl_InstanceID; }
#endif 
#endif // GPU_VERTEX_SHADER

// pixel shader
#ifdef GPU_PIXEL_SHADER
// Stereo variant
#ifdef GPU_TRANSFORM_IS_STEREO
// With stereo camera provided
#ifdef GPU_TRANSFORM_STEREO_CAMERA

// Stereo camera is available and the current invocation of the pixel shader is side specific
layout(location = GPU_ATTR_V2F_STEREO_SIDE) flat in int _stereoSide;

// gpu_StereoSide()
// THe side of stereo is 0 for left, 1 for right
int gpu_StereoSide() {
    return _stereoSide;
}

#endif
#else
// gpu_StereoSide()
// THe side of stereo is 0 for left, 1 for right
int gpu_StereoSide() {
    return 0;
}
#endif

// Fetch an eye texture potentially stereo
vec4 gpu_sideTexture(sampler2DArray s, vec2 uv) {
    return texture(s, vec3(uv, float(gpu_StereoSide())));
}

#endif // GPU_PIXEL_SHADER

<@endif@>
